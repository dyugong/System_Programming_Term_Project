spell checking -> error handling
wget -> Web site, FIle download, back-up
scheduler ->  server needed, calender, event handling, alarm
chatting program: opensrc 기반 function 추가

strace: static하게 있는 file의 system call 추적하고 visualize
top: dynamic하게 process 사용량을 추적 -> visualize

● command를 입력하면 보여줄 수 있게끔
컴퓨터 구조 하면서 배운 pipelining
-------------------------------------------------------
strace와 top을 pipelining하여, system call이 실행될 때 마다, 시작시간, 종료시간을 분석해서
top에서 cpu사용량을 측정

실행을 안하면 확인할 수가 없음
-> pidstat으로 cpu사용량 측정 

Fork: pidstat은 각 프로세스의 CPU 사용량을 모니터링하는데,
 이를 위해서는 각 프로세스를 별도의 자식 프로세스로 분리하고, 
이들 자식 프로세스들의 CPU 사용량을 모니터링합니다. 이를 위해서는 Fork 시스템 콜을 사용합니다.

Signal handling: pidstat은 사용자가 지정한 시간 간격으로 프로세스의 CPU 사용량을 측정합니다.
 이를 위해서는 alarm 시그널을 사용하여 프로그램이 주어진 시간 간격마다 작업을 수행하도록 합니다.

Time handling: pidstat은 각 프로세스의 CPU 사용량을 측정합니다.
 이를 위해서는 현재 시간을 측정하는 gettimeofday 시스템 콜을 사용합니다.

File I/O: pidstat은 /proc 파일 시스템을 통해 프로세스의 CPU 사용량, 메모리 사용량, I/O 사용량 등을 
모니터링합니다. 이를 위해서는 파일 입출력 함수를 사용하여 /proc 파일 시스템에 접근합니다.

Inter-process communication: pipe or socket: pidstat은 자식 프로세스로부터 수집한 정보를 
부모 프로세스로 전달해야 합니다. 이를 위해서는 파이프 또는 소켓 통신을 사용합니다.
